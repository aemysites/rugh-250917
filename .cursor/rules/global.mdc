---
description: Global rules for the codebase
globs:
alwaysApply: true
---

## Global rules

- Always suggest rule updates to the relevant rule file if the rules are outdated, inaccurate, or incomplete.
- Always reference https://www.aem.live/docs/ documentation.
- This codebase is used in conjunction with an Adobe Edge Delivery Services content source to provide a functional storefront.
- Documents in the content source are used to describe a page's content and overall layout as well as arguments to blocks (block config).
- Content Documents are like "lego instructions" and blocks are like "lego pieces" that are assembled to build a page.
- For information and context about AEM, try searching www.aem.live or use the search_storefront_docs MCP tool.

### For Blocks
- Blocks refer to any folder and its contents in the `blocks/` directory and contain at minimum a css and js file
- Blocks are rendered into the DOM at runtime
- If a block imports from "@dropins/.." namespace, it is using Dropins in some form, such as a container, or api function
- Always refer to the block's README.md for initial context

### For Modularization (MANDATORY)
- When adding new functionality to a block, create sibling files (e.g., `utils.js`, `components.js`, `helpers.js`) instead of adding code to existing files
- This applies to:
  - Utility functions (data processing, formatting, calculations)
  - Component creation functions (UI elements, widgets)
  - Helper functions (validation, transformation, API calls)
  - Any function longer than 10 lines or with multiple responsibilities
- Import and use these modular functions in the main block file
- Only add code directly to existing files if it's a simple one-liner or configuration
- If functionality is used across multiple blocks, create a shared file in a `scripts/utils` directory
- **CSS Loading Strategy**: For shared utilities with CSS, use dynamic CSS loading instead of modifying `head.html`

**Example Implementation:**
```javascript
// Load CSS dynamically
let cssLoaded = false;
function loadCSS() {
  if (cssLoaded) return;

  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = '/styles/component-name.css';
  document.head.appendChild(link);
  cssLoaded = true;
}

export function createComponent() {
  loadCSS(); // Load CSS when component is used
  // ... component logic
}
```

## Rule File Index

This repository contains comprehensive rules organized by topic:

### Dropins and Containers
- **dropins.mdc** - Comprehensive dropin documentation, container usage, slots, integration patterns, and customization guidelines
